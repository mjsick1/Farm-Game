import java.security.SecureRandom;

public class Testing {
    //random number generation
    private static final SecureRandom randomNumbers = new SecureRandom();

    //weather constants.
    static final int WEATHER_RAINY = 0;
    static final int WEATHER_SUNNY = 1;
    static final int WEATHER_CLOUDY = 2;
    static final int WEATHER_SNOWY = 3;

    //Declare constants for percent chance of weather
    // (WEATHER_CHANCE_HIGH + 2(WEATHER_CHANCE_MEDIUM) + WEATHER_CHANCE_LOW) should equal 1.00
    static final double WEATHER_CHANCE_HIGH = 0.75;
    static final double WEATHER_CHANCE_MEDIUM = 0.10;
    static final double WEATHER_CHANCE_LOW = 0.05;

    //Declare crop sell and purchase price constants
    static final double PURCHASE_PRICE = 1500.00;
    static final double SELL_PRICE_GOOD = 5000.00;
    static final double SELL_PRICE_MEDIUM = 2500.00;
    static final double SELL_PRICE_POOR = 1000.00;

    //declare crop price reduction constants.
    static final double PESTICIDES = 0.90;
    static final double INSECTS = 0.60;
    static final double TORNADO = 0.35;
    static final double FROST = 0.85;

    //declare constants for percent chance of natural disasters.
    static final double INSECTS_CHANCE_RAINY = 0.20;
    static final double INSECTS_CHANCE_SUNNY = 0.65;
    static final double INSECTS_CHANCE_CLOUDY = 0.40;
    static final double INSECTS_CHANCE_SNOWY = 0.05;
    static final double TORNADO_CHANCE = 0.10;
    static final double FROST_CHANCE = 0.30;

    public static void main(String[] args) {
        //declare season arrays and season counter
        int seasonCurrentCounter = 0;
        double[] seasonCurrent = new double[3];

        //declare arrays for each of three land plots
        double[] field1 = new double[5];
        double[] field2 = new double[5];
        double[] field3 = new double[5];

        //declare pesticides boolean for each of three land plots
        boolean pesticideField1 = false;
        boolean pesticideField2 = false;
        boolean pesticideField3 = false;

        /*for the season arrays,
        Index 0 is rainy weather chance, index 1 is sunny weather chance, index 2 is cloudy weather chance.
        Index 3 is not necessary. If it is not rainy, sunny, or cloudy, it will default to snowy.
        {rainy weather chance, sunny weather chance, cloudy weather chance}
        */
        double[] seasonSpring = {WEATHER_CHANCE_HIGH, WEATHER_CHANCE_MEDIUM, WEATHER_CHANCE_LOW};
        double[] seasonSummer = {WEATHER_CHANCE_MEDIUM, WEATHER_CHANCE_HIGH, WEATHER_CHANCE_MEDIUM};
        double[] seasonFall = {WEATHER_CHANCE_LOW, WEATHER_CHANCE_MEDIUM, WEATHER_CHANCE_HIGH};
        double[] seasonWinter = {WEATHER_CHANCE_MEDIUM, WEATHER_CHANCE_LOW, WEATHER_CHANCE_MEDIUM};

        //Declare crop arrays.
        /* Indexes 0-3 are used to calculate sell price for specific seasons.
        The seasons correspond to the weather constants listed above, so index 0 is used for WEATHER_RAINY etc.
        Index 4 is the purchase price of the crop.
        {Rainy sell price, Sunny sell price, Cloudy sell price, Snowy sell price, purchase price}
         */
        double[] carrots = {SELL_PRICE_GOOD, SELL_PRICE_MEDIUM, SELL_PRICE_POOR, SELL_PRICE_MEDIUM, PURCHASE_PRICE};
        double[] corn = {SELL_PRICE_MEDIUM, SELL_PRICE_GOOD, SELL_PRICE_MEDIUM, SELL_PRICE_POOR, PURCHASE_PRICE};
        double[] potatoes = {SELL_PRICE_POOR, SELL_PRICE_MEDIUM, SELL_PRICE_GOOD, SELL_PRICE_MEDIUM, PURCHASE_PRICE};
        double[] wheat = {SELL_PRICE_MEDIUM, SELL_PRICE_POOR, SELL_PRICE_MEDIUM, SELL_PRICE_GOOD, PURCHASE_PRICE};
        double[] cabbage = {SELL_PRICE_MEDIUM, SELL_PRICE_MEDIUM, SELL_PRICE_MEDIUM, SELL_PRICE_MEDIUM, PURCHASE_PRICE};

        boolean escape = false;     //TODO: flag to escape while loop. Delete later.

        while (!escape) {
            System.out.println(seasonCurrentCounter);   //TODO: DELETE
            switch (seasonCurrentCounter % 4) { //determines which season it is. Repeats every 4 seasons.
                case 0:     //spring
                    seasonCurrent = seasonSpring;
                    System.out.println("Spring");   //TODO: DELETE
                    break;
                case 1:     //summer
                    seasonCurrent = seasonSummer;
                    System.out.println("Summer");   //TODO: DELETE
                    break;
                case 2:     //fall
                    seasonCurrent = seasonFall;
                    System.out.println("Fall"); //TODO: DELETE
                    break;
                default:    //default is winter
                    seasonCurrent = seasonWinter;
                    System.out.println("Winter");   //TODO: DELETE
                    break;
            }

            System.out.println();   //TODO: DELETE
            if (seasonCurrentCounter >= 15) {   //TODO: DELETE
                escape = true;  //TODO: DELETE
            }   //TODO: DELETE
            seasonCurrentCounter++;     //increment the season counter

            //TODO delete
            System.out.println(calculateSellPrice(cabbage, changeWeather(seasonCurrent), false));
            System.out.println();

        }

    }   //end of main


    //Take the 3 index values of a double array and use them to give an integer between 0 and 3
    //The integer given will be used to determine the current weather conditions.
    public static int changeWeather(double[] season) {
        int weather = WEATHER_SNOWY;    //default value is snowy
        double weatherThisSeason = randomNumbers.nextDouble();
        if (weatherThisSeason <= season[0]) {   // rainy weather
            weather = WEATHER_RAINY;
        } else if (weatherThisSeason <= (season[0] + season[1])) {  //if not rainy, check for sunny
            weather = WEATHER_SUNNY;
        } else if (weatherThisSeason <= (season[0] + season[1] + season[2])) {  //if not sunny, check for cloudy
            weather = WEATHER_CLOUDY;
        }   //If not rainy, sunny, or cloudy, weather is  set to WEATHER_SNOWY by default. No need to check further.

        return weather;
    }   //end of changeWeather

    //Take the current weather, crops in a field, and pesticides, generate natural events,
    // and calculate the sell price for the end of a season.
    public static double calculateSellPrice(
            double[] crops, int season /*Use changeWeather(seasonCurrent)*/, boolean pesticidesUsed) {

        //declare sellPrice
        double sellPrice = 0;
        //declare insectChance
        double insectChance = 0;

        //generate sellPrice based off season and randomly-generated events. Calculate percent chance for insects.
        switch (season) {

            case WEATHER_RAINY:
                sellPrice = crops[WEATHER_RAINY];
                insectChance = INSECTS_CHANCE_RAINY;
                //randomly generate if tornado appears
                if (randomNumbers.nextDouble() < TORNADO_CHANCE) {
                    sellPrice *= TORNADO;
                    System.out.println("A tornado appeared");   //TODO: DELETE LINE
                }
                break;

            case WEATHER_SUNNY:
                sellPrice = crops[WEATHER_SUNNY];
                insectChance = INSECTS_CHANCE_SUNNY;
                break;

            case WEATHER_CLOUDY:
                sellPrice = crops[WEATHER_CLOUDY];
                insectChance = INSECTS_CHANCE_CLOUDY;
                break;

            case WEATHER_SNOWY:
                sellPrice = crops[WEATHER_SNOWY];
                insectChance = INSECTS_CHANCE_SNOWY;
                //randomly generate if frost appears.
                if (randomNumbers.nextDouble() < FROST_CHANCE) {
                    sellPrice *= FROST;
                    System.out.println("Frost has appeared");   //TODO: DELETE LINE
                }
                break;
        }

        //reduce sellPrice if pesticides have been applied.
        // If not, randomly generate if insects appear and reduce sellPrice if they do.
        if (pesticidesUsed) {
            sellPrice *= PESTICIDES;
        } else if (randomNumbers.nextDouble() < insectChance) {
            sellPrice *= INSECTS;
            System.out.println("Insects appeared"); //TODO: DELETE LINE
        }

        return sellPrice;
    }   //end of calculateSellPrice

}   //end of class
